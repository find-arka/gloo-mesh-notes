---
apiVersion: admin.gloo.solo.io/v2
kind: KubernetesCluster
metadata:
  name: mgmt
  namespace: gloo-mesh
spec:
  clusterDomain: cluster.local
---
apiVersion: networking.gloo.solo.io/v2
kind: VirtualGateway
metadata:
  name: north-south-gw
  namespace: istio-ingress
spec:
  workloads:
    - selector:
        labels:
          app: istio-ingress
        cluster: mgmt
  listeners: 
    - http: {}
      port:
        number: 80
      allowedRouteTables:
        - host: '*'
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: httpbin
  namespace: httpbin
spec:
  hosts:
    - 'httpbin.example.com'
  virtualGateways:
    - name: north-south-gw
      namespace: istio-ingress
      cluster: mgmt
  http:
  - matchers:
    - uri:
        prefix: /
        ignoreCase: true
    forwardTo:
      destinations:
      - ref:
          name: httpbin
          namespace: httpbin
          cluster: mgmt
        port:
          number: 8000
        kind: SERVICE
---
apiVersion: v1
data:
  relay: |
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_binary:
            endpoint: 0.0.0.0:6832
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_http:
            endpoint: 0.0.0.0:14268

      opencensus:
        endpoint: 0.0.0.0:55679

      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      zipkin:
        endpoint: 0.0.0.0:9411

      hubble:
        endpoint: unix:///var/run/cilium/hubble.sock
        tls:
          insecure: true
        buffer_size: 1

      prometheus:
        config:
          global:
            evaluation_interval: 1m
            scrape_interval: 15s
            scrape_timeout: 15s
          scrape_configs:
          # Scrape the collector itself
          - job_name: otel-collector
            scrape_interval: 15s
            static_configs:
            - labels:
                collector_name: ${KUBE_POD_NAME}
                cluster: mgmt
              targets:
                - 0.0.0.0:8888

          # Scrape workload metrics
          - job_name: mesh-workloads
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: '.*-envoy-prom'
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod_name
            - action: replace
              replacement: mgmt
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            metric_relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # if both workload id and destination service are unknown
            # set the label to ".." which will be handled by a later rule
            - source_labels:
              - destination_workload_id
              - destination_service
              separator: ";"
              target_label: destination_workload_id
              replacement: ".."
              regex: "unknown.unknown.unknown;unknown"
            # if workload id is unknown but we have a destination
            # service, use it
            - source_labels:
              - destination_workload_id
              - destination_service
              separator: ";"
              target_label: destination_workload_id
              replacement: $$2.<unknown>.<unknown>
              regex: "(unknown.unknown.unknown);(.*)"
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."

          # Scrape istiod metrics
          - job_name: istiod-metrics
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
                label: "operator.istio.io/component"
            relabel_configs:
            - action: keep
              regex: pilot|istiod
              source_labels:
                - __meta_kubernetes_pod_label_istio
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod_name
            - action: replace
              replacement: mgmt
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase

          # Scrape cilium metrics
          - job_name: cilium-pods
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: 'hubble-metrics|prometheus'
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            - source_labels: [__meta_kubernetes_pod_label_k8s_app]
              action: replace
              target_label: k8s_app
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod
            - action: replace
              replacement: mgmt
              target_label: cluster

          # Scrape the gloo platform pods
          - job_name: gloo-platform-pods
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                - gloo-mesh
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: gloo-mesh-mgmt-server|gloo-mesh-agent|gloo-network-agent|gloo-insights-engine|gloo-mesh-analyzer
              source_labels:
              - __meta_kubernetes_pod_label_app
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: stats
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            - action: replace
              replacement: mgmt
              target_label: cluster
            - action: replace
              target_label: pod
              source_labels: [__meta_kubernetes_pod_name]

          # Scrape the ambient ztunnels
          - job_name: ambient-ztunnels
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: ztunnel
              source_labels:
              - __meta_kubernetes_pod_label_app
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              replacement: "http"
              target_label: __schema__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              replacement: mgmt
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            metric_relabel_configs:
            - target_label: ambient
              replacement: "ztunnel"
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."

          # Scrape the ambient waypoints
          - job_name: ambient-waypoints
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: ".+"
              source_labels:
              - __meta_kubernetes_pod_annotation_istio_io_for_service_account
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              replacement: "http"
              target_label: __schema__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            - action: replace
              replacement: mgmt
              target_label: cluster
            metric_relabel_configs:
            - target_label: ambient
              replacement: "waypoint"
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: mgmt
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
      # Custom receivers
      filelog/access_logs:
        include:
        - /var/log/pods/*/istio-proxy/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - expr: body matches "^[^{}]*$"
          type: filter
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          type: json_parser
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          output: log_parser
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - id: log_parser
          parse_from: attributes.log
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.timestamp
          type: json_parser
        - expr: (attributes?.api_id ?? "") == ""
          type: filter
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - field: body
          type: remove
        - field: attributes.log
          type: remove
      filelog/cilium:
        include:
        - /var/log/pods/*_cilium-*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: (?:(.*\/pods\/)(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)(?:[^\/]+\/)(?P<container_name>[^\/]+)\/)
          type: regex_parser
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - cache:
            size: 128
          id: extract_component_from_pod_name
          parse_from: resource["k8s.pod.name"]
          regex: ^(?P<component_name>cilium(?:-operator)?)
          type: regex_parser
        - from: attributes.component_name
          to: resource["component"]
          type: move
      filelog/gloo_components:
        include:
        - /var/log/pods/*_gloo-*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-agent"
          type: add
          value: gloo-mesh-agent
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-mgmt-server"
          type: add
          value: gloo-mesh-mgmt-server
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-ui"
          type: add
          value: gloo-mesh-ui
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-redis"
          type: add
          value: gloo-mesh-redis
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-telemetry-collector-agent"
          type: add
          value: gloo-telemetry-collector-agent
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-telemetry-gateway"
          type: add
          value: gloo-telemetry-gateway
      filelog/istiod:
        include:
        - /var/log/pods/*_istiod-*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - cache:
            size: 128
          id: extract_component_from_pod_name
          parse_from: resource["k8s.pod.name"]
          regex: ^(?P<component_name>.*)-[0-9a-zA-Z]{1,10}-[0-9a-zA-Z]*$
          type: regex_parser
        - from: attributes.component_name
          to: resource["component"]
          type: move

    processors:
      resource/cluster_context:
        attributes:
          - key: "cluster_name"
            action: insert
            value: mgmt

      resource/hubble_source_context:
        attributes:
          - key: "source"
            action: insert
            value: "hubble"

      resource/ui_source_context:
        attributes:
          - key: "source"
            action: insert
            value: "ui-log-stream"

      resource/portal_source_context:
        attributes:
          - key: "source"
            action: insert
            value: "portal"

      gloo_metrics_processor:
        clusterName: mgmt
        enableCiliumProcessor: true
        enableClusterNodeProcessor: false

      filter/min:
        metrics:
          include:
            match_type: strict
            metric_names:
              # istio gateway, sidecar, ztunnel, and waypoint metrics
              - istio_requests_total
              - istio_request_duration_milliseconds
              - istio_tcp_sent_bytes_total
              - istio_tcp_received_bytes_total
              - istio_tcp_connections_opened_total
              # istiod metrics
              - pilot_proxy_convergence_time
              # required for meshctl
              - relay_pull_clients_connected
              - relay_push_clients_connected
              - relay_push_clients_warmed
              # cilium hubble metrics
              - hubble_flows_processed_total
              - hubble_drop_total
              # cilium insights
              - cilium_operator_ipam_ips
              - cilium_unreachable_nodes
              - cilium_identity
              - cilium_bpf_map_pressure
              - cilium_drop_count_total
              # Keep otel-collector metrics that show how it's working
              - otelcol_processor_refused_metric_points
              - otelcol_receiver_refused_metric_points
              - otelcol_processor_refused_spans
              - otelcol_exporter_queue_capacity
              - otelcol_exporter_queue_size
              - otelcol_loadbalancer_backend_latency
              - otelcol_exporter_send_failed_spans
              # OTel in version 0.87.0+ has a bug where it will drop metrics if the suffix is added, in this case `_total`
              # the alternative with the suffix are kept in place if this breaking change/bug is fixed in the future
              - istio_requests
              - istio_tcp_sent_bytes
              - istio_tcp_received_bytes
              - istio_tcp_connections_opened
              - hubble_flows_processed
              - hubble_drop
              - gloo_mesh_reconciler_time_sec
              - gloo_mesh_garbage_collection_time_sec
              - gloo_mesh_redis_relation_err
              - gloo_mesh_redis_sync_err
              - gloo_mesh_redis_write_time_sec
              - gloo_mesh_snapshot_upserter_op_time_sec
              - gloo_mesh_translation_time_sec
              - gloo_mesh_translator_concurrency
              - gloo_mesh_relay_client_delta_pull_time_sec
              - gloo_mesh_relay_client_delta_pull_err
              - gloo_mesh_relay_client_delta_push_time_sec
              - gloo_mesh_relay_client_delta_push_err
              - gloo_mesh_build_snapshot_metric_time_sec
              - gloo_mesh_redis_write_time_sec
              - gloo_mesh_redis_sync_err
              - gloo_mesh_safe_mode_active
              - gloo_core_insights_store_upsert_time_sec
              - gloo_core_insights_store_list_time_sec
              - solo_io_gloo_mesh_gateway_license
              - solo_io_insights
              - solo_io_insights_resources_scanned
              - solo_io_insight_engine_errors_total
              - solo_io_insights_total_execution_time
              - solo_io_insights_execution_time
              - solo_io_analyzer_total_execution_time
              - solo_io_analyzer_execution_time
              - solo_io_analyzer_log_gauge
              - object_write_fails_total
      filter/cilium:
        metrics:
          include:
            match_type: regexp
            metric_names:
              - hubble_.*
              - cilium_.*
              - ebpf_solo_io_.*

      # Metric label allow lists to reduce cardinality in our internal metric pipelines
      transform/keep_istio_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["cluster","collector_pod","connection_security_policy","destination_cluster","destination_principal","destination_service","destination_workload","destination_workload_id","destination_workload_namespace","gloo_mesh","namespace","pod_name","reporter","response_code","response_flags","source_cluster","source_principal","source_workload","source_workload_namespace","version","workload_id"]) where IsMatch(metric.name, "^istio.*")
      transform/keep_otelcol_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["app","cluster","collector_name","collector_pod","component","exporter","namespace","pod_template_generation","processor","service_version"]) where IsMatch(metric.name, "^otelcol.*")
      transform/keep_hubble_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["app","cluster","collector_pod","component","destination","destination_cluster","destination_pod","destination_workload","destination_workload_id","destination_workload_namespace","k8s_app","namespace","pod","protocol","source","source_cluster","source_pod","source_workload","source_workload_namespace","subtype","type","verdict","workload_id"]) where IsMatch(metric.name, "^hubble.*")
      transform/keep_cilium_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["action","address_type","api_call","app","arch","area","cluster","collector_pod","component","direction","endpoint_state","enforcement","equal","error","event_type","family","k8s_app","le","level","map_name","method","name","namespace","operation","outcome","path","pod","pod_template_generation","protocol","reason","return_code","revision","scope","source","source_cluster","source_node_name","status","subsystem","target_cluster","target_node_ip","target_node_name","target_node_type","type","valid","value","version"]) where IsMatch(metric.name, "^cilium.*")
      transform/keep_ebpf_solo_io_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["app","client_addr","cluster","code","collector_pod","component","destination","local_addr","namespace","pod","pod_template_generation","remote_identity","server_identity","source"]) where IsMatch(metric.name, "^ebpf_solo_io.*")
      # Custom processors
      batch:
        send_batch_max_size: 3000
        send_batch_size: 2000
        timeout: 600ms
      batch/logs:
        send_batch_size: 100
        timeout: 5s
      memory_limiter:
        check_interval: 1s
        limit_percentage: 85
        spike_limit_percentage: 10

    exporters:
      otlp:
        endpoint: "gloo-telemetry-gateway:4317"
        tls:
          ca_file: /etc/otel-certs/ca.crt
          server_name_override: gloo-telemetry-gateway.gloo-mesh
      otlp/jaeger:
        endpoint: gloo-jaeger-collector.gloo-mesh.svc:4317
        tls:
          insecure: true
      datadog:
        api:
          site: us5.datadoghq.com
          key: <>
          fail_on_invalid_key: true
      # Custom exporters
      clickhouse:
        database: default
        endpoint: tcp://clickhouse.gloo-mesh.svc:9000?dial_timeout=10s&compress=lz4
        logs_table_name: gloo_api_logs
        password: default
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_elapsed_time: 5m
          max_interval: 30s
        timeout: 5s
        ttl_days: 3
        username: default
      prometheus:
        endpoint: 0.0.0.0:9091
      redisstream/basic:
        endpoint: gloo-mesh-redis.gloo-mesh.svc:6379
        expire: 30m
        max_entries: "1"
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
      redisstream/ui:
        endpoint: gloo-mesh-redis.gloo-mesh.svc:6379
        expire: 30m
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
          - component
          - k8s.pod.name
          - k8s.container.name

    extensions:
      health_check: {}
      memory_ballast: {}

    service:
      telemetry:
        logs:
          encoding: json
        metrics:
          address: 0.0.0.0:8888
      extensions:
        - health_check
        - memory_ballast
      pipelines:
        logs/analyzer:
          processors:
          - resource/cluster_context
          - batch/logs
          receivers:
          - otlp
          exporters:
          - redisstream/basic
        logs/ui:
          processors:
          - resource/cluster_context
          - resource/ui_source_context
          - batch/logs
          receivers:
          - filelog/gloo_components
          - filelog/istiod
          - filelog/cilium
          exporters:
          - redisstream/ui
        metrics/ui:
          processors:
          - memory_limiter
          - filter/min
          - transform/keep_istio_labels
          - transform/keep_otelcol_labels
          - gloo_metrics_processor
          - batch
          receivers:
          - prometheus
          exporters:
          - prometheus
        metrics/datadog:
          receivers:
          - prometheus
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - datadog
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: gloo-platform
    meta.helm.sh/release-namespace: gloo-mesh
  labels:
    app.kubernetes.io/managed-by: Helm
  name: gloo-telemetry-collector-config
  namespace: gloo-mesh

