apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gloo-platform-helm
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: gloo-mesh
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gloo-platform
    helm:
      skipCrds: true
      values: |
        licensing:
          licenseSecretName: gloo-mesh-enterprise-license-keys
        common:
          cluster: mgmt
        glooMgmtServer:
          enabled: true
          serviceType: LoadBalancer
          serviceOverrides:
            metadata:
              annotations:
                # using the default AWS Cloud in-tree controller 
                service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
                # uncomment if using the default AWS LB controller
                #service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
                #service.beta.kubernetes.io/aws-load-balancer-type: "external"
                #service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          # TODO: check if these values are default
          image:
            registry: gcr.io/gloo-mesh
            repository: gloo-mesh-mgmt-server
          relay:
            # To disable relay CA functionality, set to true. Set to true only when you supply your custom client certs to the agents for relay mTLS. The gloo-mesh-mgmt-server pod will not require a token secret or the signing cert secret. The agent pod will not require the token secret, but will fail without a client cert.
            disableCa: true
            # Do not auto-generate self-signed CA certificates. Set to true only when you supply own.
            disableCaCertGeneration: true
            # do not create token secret
            disableTokenGeneration: true
            tlsSecret:
                name: relay-server-tls-secret
          # A list of image pull secrets in the same namespace that store the credentials that are used to access a private container image registry. The image registry stores the container image that you want to use for this component.
          #imagePullSecrets: []
        prometheus:
          enabled: true
          skipAutoMigration: true
          #imagePullSecrets: []
          # - name: "image-pull-secret"
          configmapReload:
            prometheus:
              image:
                repository: quay.io/prometheus-operator/prometheus-config-reloader
          server:
            image:
              repository: quay.io/prometheus/prometheus
        redis:
          deployment:
            enabled: true
            # TODO: check if these values are default
            image:
              registry: gcr.io/gloo-mesh
              repository: redis
            #imagePullSecrets: []
        glooUi:
          enabled: true
          # TODO: check if these values are default
          image:
            registry: gcr.io/gloo-mesh
            repository: gloo-mesh-apiserver
          # A list of image pull secrets in the same namespace that store the credentials that are used to access a private container image registry. The image registry stores the container image that you want to use for this component.
          #imagePullSecrets: []
          sidecars:
            console:
              # TODO: check if these values are default
              image:
                registry: gcr.io/gloo-mesh
                repository: gloo-mesh-ui
            envoy:
              # TODO: check if these values are default
              image:
                registry: gcr.io/gloo-mesh
                repository: gloo-mesh-envoy
        telemetryGateway:
          enabled: true
          # Notice how also the telemetry gateway needs a load balancer type of service reachable from the workload cluster
          service:
            type: LoadBalancer
            # https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/values.yaml#L479
            annotations:
              # using the default AWS Cloud in-tree controller 
              service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
              # uncomment if using the default AWS LB controller
              #service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
              #service.beta.kubernetes.io/aws-load-balancer-type: "external"
              #service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          # TODO: check if these values are default
          image:
            repository: gcr.io/gloo-mesh/gloo-otel-collector
          #imagePullSecrets: []
        telemetryGatewayCustomization:
          disableCertGeneration: true
        telemetryCollector:
          enabled: true
          config:
            exporters:
              otlp:
                endpoint: gloo-telemetry-gateway.gloo-mesh:4317
          image:
            # TODO: double check if this value is default
            repository: gcr.io/gloo-mesh/gloo-otel-collector
          #imagePullSecrets: []
    repoURL: https://storage.googleapis.com/gloo-platform/helm-charts
    targetRevision: 2.6.5
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
